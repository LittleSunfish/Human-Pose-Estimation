import torch
import torch.nn as nn
import torch.nn.functional as F

class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, in_channels, reduced_channels, out_channels, stride=1, starting=False):
        super(Bottleneck, self).__init__()

        assert reduced_channels * expansion == out_channels, "channels does not match"
        
        self.conv1 = nn.Sequential(
            nn.Conv2d(in_channels, reduced_channels, kernel_size=1, bias=False),
            nn.BatchNorm2d(reduced_channels),
            nn.ReLU(inplace=True)
        ) 
        self.conv2 = nn.Sequential(
            nn.Conv2d(reduced_channels, reduced_channels, kernel_size=3, stride=stride, padding=1, bias=False),
            nn.BatchNorm2d(reduced_channels),
            nn.ReLU(inplace=True)
        )
        self.conv3 = nn.Sequential(
            nn.Conv2d(reduced_channels, out_channels, kernel_size=1, bias=False),
            nn.BatchNorm2d(out_channels),
        )
        self.shortcut = nn.Sequential()

        if stride != 1 or in_channels != expansion * reduced_channels:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_channels, expansion*reduced_channels,
                          kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(expansion*reduced_channels)
            )

        self.final_relu = nn.ReLU(inplace=True)


    def forward(self, x):
        out = self.conv1(x)
        out = self.conv2(out)
        out = self.conv3(out) + self.shortcut(x)
        out = self.final_relu(out)
        return out

class HighResolutionModule(nn.Module):
    def __init__(self, num_branches, num_blocks, num_inchannels, num_channels):
        super(HighResolutionModule, self).__init__()

        pass

    def _make_one_branch(self, branch_index, num_blocks, num_channels, stride=1):
        layers = []
        # one fundamental layer
        layers.append(
            Bottleneck(in_channels, reduced_channels, out_channels, stride=1, starting=False)
        )

        # layers according to num_blocks[branch_index]
        for i in range(num_blocks[branch_index]):
            layers.append(
                Bottleneck(in_channesl, reduced_channedls, out_channels)
            )

        return nn.Sequential(*layers)

    def _make_branches(self, num_branches, num_blocks, num_channels):
        branches = []
        for i in range(num_branches):
            branches.append(self._make_one_branch(i, num_blocks))

        return nn.ModuleList(branches)

    def _make_fuse_layers(self):
        pass

    def forward(self, x):
        pass 



class PoseHRNet(nn.Module):

    def __init__(self):
        super(PoseHRNet, self).__init__()

        # stem : 2 strided convolutions decreasing the resolution 

        # main body : outputting the feature maps with the same resolution 

        # regressor: estimating the heatmaps where the keypoints are chosen and tranformed to the full resolution
        
        pass

    def _make_transition_layer():
        pass

    def _make_layer():
        pass

    def _make_stage():
        pass

    def forward(self, x):
        pass

    # to levergage pretrained model
    def init_weights():
        pass

def main():
    from torchsummary import summary

    hrnet = HRNet().cuda()
    summary(hrnet, input_size=(3,256,192))
    
if __name__ == '__main__':
    main()
